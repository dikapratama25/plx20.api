<%-- 
Name: Plexform EF Class Generator
Author: Achmad Rizal
Description: Generate EF Data Table Object (Plexform)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SysTableName" Type="SchemaExplorer.TableSchema" Category="Context" Description="" %>
<%@ Property Name="ClassName" Type="System.String" Category="Options" Description="" %>
<%@ Property Name="Namespace" Type="System.String" Category="Options" Default="MSS.Process" Description="" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
/*----- Cut the value below and put it in PlexformDBContext.cs -----*/
public virtual DbSet<Plexform.DTO.<%= this.Namespace %>.<%= this.SysTableName.ToString().Replace("dbo.", "") %>> <%= this.ClassName %> { get; set; }
/*----- Cut the value below and put it in PlexformDBContext.cs under OnModelCreating method -----*/
modelBuilder.Entity<Plexform.DTO.<%= this.Namespace %>.<%= this.SysTableName.ToString().Replace("dbo.", "") %>>(b =>
{
	b.HasKey(e => new {<% foreach (MemberColumnSchema primarykey in SysTableName.PrimaryKey.MemberColumns) { %><% string primaryName = primarykey.Column.ToString().Replace((this.SysTableName.ToString() + "."), ""); %>e.<%= primaryName %>, <% } %>});
<% foreach (ColumnSchema column in SysTableName.Columns) { %>
<% string columnName = column.ToString().Replace((this.SysTableName.ToString() + "."), ""); %>
<% if (column.ExtendedProperties["CS_Default"].Value.ToString() != string.Empty) { %>
	b.Property(e => e.<%= columnName %>).HasDefaultValueSql("<%= GetDefaultValue(column.ExtendedProperties["CS_Default"].Value.ToString()) %>");
<% } %>
<% } %>
});
/*----- Open Package  Console, set target to Plexform.EntityFrameworkCore, and execute command below -----*/
/*----- Add-Migration "Added_<%= this.SysTableName.ToString().Replace("dbo.", "") %>_Table" -----*/

/*----- <%= this.Namespace.ToString().Split('.')[1] %>DTO.cs -----*/
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Abp.Auditing;

namespace Plexform.DTO.<%= this.Namespace %> {
	#region <%= this.ClassName %>
	[Table("<%= this.SysTableName.ToString().Replace("dbo.", "") %>")]
	//[Audited]
	public class <%= this.SysTableName.ToString().Replace("dbo.", "") %> : BaseDto<<%= this.SysTableName.ToString().Replace("dbo.", "") %>> {
		<% foreach (MemberColumnSchema primarykey in SysTableName.PrimaryKey.MemberColumns) { %>
		<% string primaryName = primarykey.Column.ToString().Replace((this.SysTableName.ToString() + "."), ""); %>
		<% string fieldDataType = GetFieldDataType(primarykey.Column.SystemType.ToString()); %>
		<% string length = SetLength(primarykey.Column.SystemType.ToString(), primarykey.Size); %>
		[Key]
		[<%if (fieldDataType != "System.DateTime?") { %><% if (!string.IsNullOrEmpty(length)) {%> <%= length %>, <%}%><%}%>Required]
		public virtual <%= fieldDataType %> <%= primaryName %> { get; set; }
		<% } %>
		<% foreach (ColumnSchema column in SysTableName.NonPrimaryKeyColumns) { %>
		<% string columnName = column.ToString().Replace((this.SysTableName.ToString() + "."), ""); %>
		<% if (columnName.ToLower() != "rowguid" && columnName.ToLower() != "flag" && columnName.ToLower() != "tid" && columnName.ToLower() != "active" && columnName.ToLower() != "inuse" && columnName.ToLower() != "ishost" && columnName.ToLower() != "createby" && columnName.ToLower() != "createdate" && columnName.ToLower() != "lastupdate" && columnName.ToLower() != "updateby" && columnName.ToLower() != "synccreate" && columnName.ToLower() != "synclastupd" && columnName.ToLower() != "lastsyncby") { %>
		<% string fieldDataType = GetFieldDataType(column.SystemType.ToString()); %>
		<% string length = SetLength(column.SystemType.ToString(), column.Size); %>
		<% bool hasLength= (fieldDataType != "System.DateTime?" && !string.IsNullOrEmpty(length)) ? true : false; %>
		<%if (fieldDataType == "System.DateTime?") { %>[Column(TypeName="datetime")]<% } else { %><%if (hasLength) {%>[<%= length %><% if (!column.AllowDBNull) {%>, Required]<%} else {%>]<%}} else {%><% if (!column.AllowDBNull) {%>[Required]<%}}}%>
		public virtual <%= fieldDataType %> <%= columnName %> { get; set; }	
		<% }} %>
	}
	#endregion
}

/*----- <%= this.Namespace.ToString().Split('.')[1] %>Map.cs -----*/
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using LOGIC.Base;

namespace Plexform.Base.<%= this.Namespace %>.Map {
	#region <%= this.ClassName %>
	[Abp.AutoMapper.AutoMapTo(typeof(Plexform.DTO.<%= this.Namespace %>.<%= this.ClassName %>))]
	public class Map<%= this.SysTableName.ToString().Replace("dbo.", "") %> : BaseMapId {
		<% foreach (MemberColumnSchema primarykey in SysTableName.PrimaryKey.MemberColumns) { %>
		<% string primaryName = primarykey.Column.ToString().Replace((this.SysTableName.ToString() + "."), ""); %>
		<% string fieldDataType = GetFieldDataType(primarykey.Column.SystemType.ToString()); %>
		<% string length = SetLength(primarykey.Column.SystemType.ToString(), primarykey.Size); %>
		[JsonProperty("<%= primaryName.ToLower() %>")] 
		[<%if (fieldDataType != "System.DateTime?") { %><% if (!string.IsNullOrEmpty(length)) {%> <%= length %>, <%}%><%}%>Required]
		public virtual <%= fieldDataType %> <%= primaryName %> { get; set; }
		<% } %>
		<% foreach (ColumnSchema column in SysTableName.NonPrimaryKeyColumns) { %>
		<% string columnName = column.ToString().Replace((this.SysTableName.ToString() + "."), ""); %>
		<% if (columnName.ToLower() != "rowguid" && columnName.ToLower() != "flag" && columnName.ToLower() != "tid" && columnName.ToLower() != "active" && columnName.ToLower() != "inuse" && columnName.ToLower() != "ishost" && columnName.ToLower() != "createby" && columnName.ToLower() != "createdate" && columnName.ToLower() != "lastupdate" && columnName.ToLower() != "updateby" && columnName.ToLower() != "synccreate" && columnName.ToLower() != "synclastupd" && columnName.ToLower() != "lastsyncby") { %>
		<% string fieldDataType = GetFieldDataType(column.SystemType.ToString()); %>
		<% string length = SetLength(column.SystemType.ToString(), column.Size); %>
		<% bool hasAttribute = (fieldDataType != "System.DateTime?" && !string.IsNullOrEmpty(length)) ? true : false; %>
		<% bool hasLength= (fieldDataType != "System.DateTime?" && !string.IsNullOrEmpty(length)) ? true : false; %>
		[JsonProperty("<%= columnName.ToLower() %>")] <%if (hasLength) {%>[<%= length %>]<%}%>
		public virtual <%= fieldDataType %> <%= columnName %> { get; set; }
		<% }} %>
	}
	#endregion
}

/*----- <%= this.Namespace.ToString().Split('.')[1] %>Repo.cs -----*/
using Microsoft.AspNetCore.Hosting;
using Logic.Repo;

namespace Plexform.Base.<%= this.Namespace %>.Repo {
	#region <%= this.ClassName %>
	public class <%= this.ClassName %> : BaseRepository<Plexform.DTO.<%= this.Namespace %>.<%= this.ClassName %>>
    {
        public <%= this.ClassName %>(IWebHostEnvironment env, string connectionString) : base(env, connectionString) { }
    }
	#endregion
}

/*----- <%= this.Namespace.ToString().Split('.')[1] %>Manager.cs -----*/
using Abp.Localization;
using Abp.ObjectMapping;
using Abp.UI;
using Abp.Web.Models;
using LOGIC.Shared.Collection;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Plexform.Authorization.Roles;
using Plexform.Authorization.Users;
using Plexform.Base.Core.Controller;
using Plexform.Base.Core.Helper;
using Plexform.MultiTenancy;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Transactions;
using Plexform.DTO.Core.Location;
using Plexform.DTO.Core.General;
using System.Web;
using Abp.Runtime.Security;
using System.Linq;

namespace Plexform.Base.<%= this.Namespace %> {
	public class <%= this.Namespace.ToString().Split('.')[1] %>Manager : BaseClass
	{
		public <%= this.Namespace.ToString().Split('.')[1] %>Manager(
            IWebHostEnvironment env,
            IAppFolders appFolders,
            IObjectMapper objectMapper,
            ILocalizationManager localizationManager,
            IExcelExporter excelExporter,
            RoleManager roleManager,
            UserManager userManager,            
            TenantManager tenantManager)
            : base(env, appFolders, objectMapper, roleManager, userManager, tenantManager, excelExporter, localizationManager)
        {
        }
	}
}

<script runat="template">
	public string SetFirstLetterToLowerCase(string str) {
		string val = string.Empty;
		if (!string.IsNullOrEmpty(str)) {
			val = char.ToLowerInvariant(str[0]) + str.Substring(1);
		}
		return val;
	}
	
	public string SetFirstLetterToUpperCase(string str) {
		string val = string.Empty;
		if (!string.IsNullOrEmpty(str)) {
			val = char.ToUpperInvariant(str[0]) + str.Substring(1);
		}
		return val;
	}
	
	public string GetFieldDataType(string DataTypeName) {
		string datatypename = DataTypeName.Replace("[", "").Replace("]", "");
        switch (datatypename) {
            case "System.String":
				return "string";
            case "System.Guid":
                return "System.Guid";
            case "System.DateTime":
                return "System.DateTime?";
            case "System.Byte":
				return "byte?";
			case "System.Int16":
				return "int?";
			case "System.Int32":
				return "int?";	
			case "System.Int64":
				return "long?";
            case "System.Decimal":
                return "decimal?";
			case "System.Single":
                return "float?";
			case "System.Double":
                return "double?";
			case "System.Object":
                return "System.DateTime";	
            default:
                return datatypename;
        }
    }
	
	public string SetLength(string DataTypeName, int size) {
		if (size > 0) {
			string datatypename = DataTypeName.Replace("[", "").Replace("]", "");
        	switch (datatypename) {
				case "System.Byte":
					return "";
				case "System.Int16":
					return "Range(0," + new String('9', size) +")";
				case "System.Int32":
					return "Range(0," + new String('9', size) +")";
				case "System.Int64":
					return "Range(0," + new String('9', size) +")";
				case "System.String":
					return "MaxLength(" + size +")";
				default:
					return "";
        	}
		}
		else {
			return "";
		}
    }
	
	public string GetDefaultValue(string value) {
		if (value.Contains("[dbo].[D_ACTIVE]")) {
			return "(1)";
		}
		else if (value.Contains("[dbo].[D_AMTVALUE0]")) {
			return "(0)";
		}		
		else if (value.Contains("[dbo].[D_EMPTY]")) {
			return "''";	
        }
		else if (value.Contains("[dbo].[D_FLAG]")) {
			return "(1)";
		}
		else if (value.Contains("[dbo].[D_INUSE]")) {
			return "(0)";
		}
		else if (value.Contains("[dbo].[D_NULL]")) {
			return "NULL";
		}
		else if (value.Contains("[dbo].[D_NUM0]")) {
			return "(0)";
		}
		else if (value.Contains("[dbo].[D_NUM1]")) {
			return "(1)";	
        }
		else if (value.Contains("[dbo].[D_STATUS]")) {
			return "(0)";
		}
		else if (value.Contains("[dbo].[D_USRTIME]")) {
			return "(0)";	
		}
		else if (value.StartsWith("(") && value.EndsWith(")")) {
			return value.Remove(value.Length - 1).Substring(1);
		}
        else {
            return value;
		}		
    }
</script>
